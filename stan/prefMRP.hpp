
// Code generated by stanc v2.24.1
#include <stan/model/model_header.hpp>
namespace prefMRP_model_namespace {


inline void validate_positive_index(const char* var_name, const char* expr,
                                    int val) {
  if (val < 1) {
    std::stringstream msg;
    msg << "Found dimension size less than one in simplex declaration"
        << "; variable=" << var_name << "; dimension size expression=" << expr
        << "; expression value=" << val;
    std::string msg_str(msg.str());
    throw std::invalid_argument(msg_str.c_str());
  }
}

inline void validate_unit_vector_index(const char* var_name, const char* expr,
                                       int val) {
  if (val <= 1) {
    std::stringstream msg;
    if (val == 1) {
      msg << "Found dimension size one in unit vector declaration."
          << " One-dimensional unit vector is discrete"
          << " but the target distribution must be continuous."
          << " variable=" << var_name << "; dimension size expression=" << expr;
    } else {
      msg << "Found dimension size less than one in unit vector declaration"
          << "; variable=" << var_name << "; dimension size expression=" << expr
          << "; expression value=" << val;
    }
    std::string msg_str(msg.str());
    throw std::invalid_argument(msg_str.c_str());
  }
}


using std::istream;
using std::string;
using std::stringstream;
using std::vector;
using std::pow;
using stan::io::dump;
using stan::math::lgamma;
using stan::model::model_base_crtp;
using stan::model::rvalue;
using stan::model::cons_list;
using stan::model::index_uni;
using stan::model::index_max;
using stan::model::index_min;
using stan::model::index_min_max;
using stan::model::index_multi;
using stan::model::index_omni;
using stan::model::nil_index_list;
using namespace stan::math;
using stan::math::pow; 

static int current_statement__ = 0;
static const std::vector<string> locations_array__ = {" (found before start of program)",
                                                      " (in '/Users/adam/BlueRipple/research/stan/prefMRP.stan', line 18, column 2 to column 13)",
                                                      " (in '/Users/adam/BlueRipple/research/stan/prefMRP.stan', line 19, column 2 to column 21)",
                                                      " (in '/Users/adam/BlueRipple/research/stan/prefMRP.stan', line 20, column 2 to column 21)",
                                                      " (in '/Users/adam/BlueRipple/research/stan/prefMRP.stan', line 21, column 2 to column 28)",
                                                      " (in '/Users/adam/BlueRipple/research/stan/prefMRP.stan', line 22, column 2 to column 23)",
                                                      " (in '/Users/adam/BlueRipple/research/stan/prefMRP.stan', line 31, column 2 to line 32, column 77)",
                                                      " (in '/Users/adam/BlueRipple/research/stan/prefMRP.stan', line 2, column 2 to column 19)",
                                                      " (in '/Users/adam/BlueRipple/research/stan/prefMRP.stan', line 3, column 2 to column 25)",
                                                      " (in '/Users/adam/BlueRipple/research/stan/prefMRP.stan', line 4, column 2 to column 23)",
                                                      " (in '/Users/adam/BlueRipple/research/stan/prefMRP.stan', line 5, column 2 to column 23)",
                                                      " (in '/Users/adam/BlueRipple/research/stan/prefMRP.stan', line 6, column 2 to column 24)",
                                                      " (in '/Users/adam/BlueRipple/research/stan/prefMRP.stan', line 7, column 2 to column 24)",
                                                      " (in '/Users/adam/BlueRipple/research/stan/prefMRP.stan', line 8, column 36 to column 37)",
                                                      " (in '/Users/adam/BlueRipple/research/stan/prefMRP.stan', line 8, column 2 to column 39)",
                                                      " (in '/Users/adam/BlueRipple/research/stan/prefMRP.stan', line 9, column 36 to column 37)",
                                                      " (in '/Users/adam/BlueRipple/research/stan/prefMRP.stan', line 9, column 2 to column 39)",
                                                      " (in '/Users/adam/BlueRipple/research/stan/prefMRP.stan', line 10, column 43 to column 44)",
                                                      " (in '/Users/adam/BlueRipple/research/stan/prefMRP.stan', line 10, column 2 to column 46)",
                                                      " (in '/Users/adam/BlueRipple/research/stan/prefMRP.stan', line 11, column 38 to column 39)",
                                                      " (in '/Users/adam/BlueRipple/research/stan/prefMRP.stan', line 11, column 2 to column 41)",
                                                      " (in '/Users/adam/BlueRipple/research/stan/prefMRP.stan', line 12, column 40 to column 41)",
                                                      " (in '/Users/adam/BlueRipple/research/stan/prefMRP.stan', line 12, column 2 to column 43)",
                                                      " (in '/Users/adam/BlueRipple/research/stan/prefMRP.stan', line 13, column 25 to column 26)",
                                                      " (in '/Users/adam/BlueRipple/research/stan/prefMRP.stan', line 13, column 2 to column 28)",
                                                      " (in '/Users/adam/BlueRipple/research/stan/prefMRP.stan', line 14, column 29 to column 30)",
                                                      " (in '/Users/adam/BlueRipple/research/stan/prefMRP.stan', line 14, column 2 to column 32)",
                                                      " (in '/Users/adam/BlueRipple/research/stan/prefMRP.stan', line 19, column 9 to column 14)",
                                                      " (in '/Users/adam/BlueRipple/research/stan/prefMRP.stan', line 20, column 9 to column 14)",
                                                      " (in '/Users/adam/BlueRipple/research/stan/prefMRP.stan', line 21, column 9 to column 15)",
                                                      " (in '/Users/adam/BlueRipple/research/stan/prefMRP.stan', line 22, column 9 to column 15)"};



class prefMRP_model final : public model_base_crtp<prefMRP_model> {

 private:
  int G;
  int J_state;
  int J_sex;
  int J_age;
  int J_educ;
  int J_race;
  std::vector<int> sex;
  std::vector<int> age;
  std::vector<int> education;
  std::vector<int> race;
  std::vector<int> state;
  std::vector<int> D_votes;
  std::vector<int> Total_votes;
 
 public:
  ~prefMRP_model() final { }
  
  std::string model_name() const final { return "prefMRP_model"; }

  std::vector<std::string> model_compile_info() const {
    std::vector<std::string> stanc_info;
    stanc_info.push_back("stanc_version = stanc3 v2.24.1");
    stanc_info.push_back("stancflags = ");
    return stanc_info;
  }
  
  
  prefMRP_model(stan::io::var_context& context__,
                unsigned int random_seed__ = 0,
                std::ostream* pstream__ = nullptr) : model_base_crtp(0) {
    using local_scalar_t__ = double ;
    boost::ecuyer1988 base_rng__ = 
        stan::services::util::create_rng(random_seed__, 0);
    (void) base_rng__;  // suppress unused var warning
    static const char* function__ = "prefMRP_model_namespace::prefMRP_model";
    (void) function__;  // suppress unused var warning
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    (void) DUMMY_VAR__;  // suppress unused var warning
    
    try {
      int pos__;
      pos__ = std::numeric_limits<int>::min();
      
      pos__ = 1;
      current_statement__ = 7;
      context__.validate_dims("data initialization","G","int",
          context__.to_vec());
      G = std::numeric_limits<int>::min();
      
      current_statement__ = 7;
      G = context__.vals_i("G")[(1 - 1)];
      current_statement__ = 7;
      current_statement__ = 7;
      check_greater_or_equal(function__, "G", G, 0);
      current_statement__ = 8;
      context__.validate_dims("data initialization","J_state","int",
          context__.to_vec());
      J_state = std::numeric_limits<int>::min();
      
      current_statement__ = 8;
      J_state = context__.vals_i("J_state")[(1 - 1)];
      current_statement__ = 8;
      current_statement__ = 8;
      check_greater_or_equal(function__, "J_state", J_state, 1);
      current_statement__ = 9;
      context__.validate_dims("data initialization","J_sex","int",
          context__.to_vec());
      J_sex = std::numeric_limits<int>::min();
      
      current_statement__ = 9;
      J_sex = context__.vals_i("J_sex")[(1 - 1)];
      current_statement__ = 9;
      current_statement__ = 9;
      check_greater_or_equal(function__, "J_sex", J_sex, 1);
      current_statement__ = 10;
      context__.validate_dims("data initialization","J_age","int",
          context__.to_vec());
      J_age = std::numeric_limits<int>::min();
      
      current_statement__ = 10;
      J_age = context__.vals_i("J_age")[(1 - 1)];
      current_statement__ = 10;
      current_statement__ = 10;
      check_greater_or_equal(function__, "J_age", J_age, 1);
      current_statement__ = 11;
      context__.validate_dims("data initialization","J_educ","int",
          context__.to_vec());
      J_educ = std::numeric_limits<int>::min();
      
      current_statement__ = 11;
      J_educ = context__.vals_i("J_educ")[(1 - 1)];
      current_statement__ = 11;
      current_statement__ = 11;
      check_greater_or_equal(function__, "J_educ", J_educ, 1);
      current_statement__ = 12;
      context__.validate_dims("data initialization","J_race","int",
          context__.to_vec());
      J_race = std::numeric_limits<int>::min();
      
      current_statement__ = 12;
      J_race = context__.vals_i("J_race")[(1 - 1)];
      current_statement__ = 12;
      current_statement__ = 12;
      check_greater_or_equal(function__, "J_race", J_race, 1);
      current_statement__ = 13;
      validate_non_negative_index("sex", "G", G);
      current_statement__ = 14;
      context__.validate_dims("data initialization","sex","int",
          context__.to_vec(G));
      sex = std::vector<int>(G, std::numeric_limits<int>::min());
      
      current_statement__ = 14;
      assign(sex, nil_index_list(), context__.vals_i("sex"),
        "assigning variable sex");
      current_statement__ = 14;
      for (int sym1__ = 1; sym1__ <= G; ++sym1__) {
        current_statement__ = 14;
        current_statement__ = 14;
        check_greater_or_equal(function__, "sex[sym1__]", sex[(sym1__ - 1)],
                               1);}
      current_statement__ = 14;
      for (int sym1__ = 1; sym1__ <= G; ++sym1__) {
        current_statement__ = 14;
        current_statement__ = 14;
        check_less_or_equal(function__, "sex[sym1__]", sex[(sym1__ - 1)],
                            J_sex);}
      current_statement__ = 15;
      validate_non_negative_index("age", "G", G);
      current_statement__ = 16;
      context__.validate_dims("data initialization","age","int",
          context__.to_vec(G));
      age = std::vector<int>(G, std::numeric_limits<int>::min());
      
      current_statement__ = 16;
      assign(age, nil_index_list(), context__.vals_i("age"),
        "assigning variable age");
      current_statement__ = 16;
      for (int sym1__ = 1; sym1__ <= G; ++sym1__) {
        current_statement__ = 16;
        current_statement__ = 16;
        check_greater_or_equal(function__, "age[sym1__]", age[(sym1__ - 1)],
                               1);}
      current_statement__ = 16;
      for (int sym1__ = 1; sym1__ <= G; ++sym1__) {
        current_statement__ = 16;
        current_statement__ = 16;
        check_less_or_equal(function__, "age[sym1__]", age[(sym1__ - 1)],
                            J_age);}
      current_statement__ = 17;
      validate_non_negative_index("education", "G", G);
      current_statement__ = 18;
      context__.validate_dims("data initialization","education","int",
          context__.to_vec(G));
      education = std::vector<int>(G, std::numeric_limits<int>::min());
      
      current_statement__ = 18;
      assign(education, nil_index_list(), context__.vals_i("education"),
        "assigning variable education");
      current_statement__ = 18;
      for (int sym1__ = 1; sym1__ <= G; ++sym1__) {
        current_statement__ = 18;
        current_statement__ = 18;
        check_greater_or_equal(function__, "education[sym1__]",
                               education[(sym1__ - 1)], 1);}
      current_statement__ = 18;
      for (int sym1__ = 1; sym1__ <= G; ++sym1__) {
        current_statement__ = 18;
        current_statement__ = 18;
        check_less_or_equal(function__, "education[sym1__]",
                            education[(sym1__ - 1)], J_educ);}
      current_statement__ = 19;
      validate_non_negative_index("race", "G", G);
      current_statement__ = 20;
      context__.validate_dims("data initialization","race","int",
          context__.to_vec(G));
      race = std::vector<int>(G, std::numeric_limits<int>::min());
      
      current_statement__ = 20;
      assign(race, nil_index_list(), context__.vals_i("race"),
        "assigning variable race");
      current_statement__ = 20;
      for (int sym1__ = 1; sym1__ <= G; ++sym1__) {
        current_statement__ = 20;
        current_statement__ = 20;
        check_greater_or_equal(function__, "race[sym1__]",
                               race[(sym1__ - 1)], 1);}
      current_statement__ = 20;
      for (int sym1__ = 1; sym1__ <= G; ++sym1__) {
        current_statement__ = 20;
        current_statement__ = 20;
        check_less_or_equal(function__, "race[sym1__]", race[(sym1__ - 1)],
                            J_race);}
      current_statement__ = 21;
      validate_non_negative_index("state", "G", G);
      current_statement__ = 22;
      context__.validate_dims("data initialization","state","int",
          context__.to_vec(G));
      state = std::vector<int>(G, std::numeric_limits<int>::min());
      
      current_statement__ = 22;
      assign(state, nil_index_list(), context__.vals_i("state"),
        "assigning variable state");
      current_statement__ = 22;
      for (int sym1__ = 1; sym1__ <= G; ++sym1__) {
        current_statement__ = 22;
        current_statement__ = 22;
        check_greater_or_equal(function__, "state[sym1__]",
                               state[(sym1__ - 1)], 1);}
      current_statement__ = 22;
      for (int sym1__ = 1; sym1__ <= G; ++sym1__) {
        current_statement__ = 22;
        current_statement__ = 22;
        check_less_or_equal(function__, "state[sym1__]", state[(sym1__ - 1)],
                            J_state);}
      current_statement__ = 23;
      validate_non_negative_index("D_votes", "G", G);
      current_statement__ = 24;
      context__.validate_dims("data initialization","D_votes","int",
          context__.to_vec(G));
      D_votes = std::vector<int>(G, std::numeric_limits<int>::min());
      
      current_statement__ = 24;
      assign(D_votes, nil_index_list(), context__.vals_i("D_votes"),
        "assigning variable D_votes");
      current_statement__ = 24;
      for (int sym1__ = 1; sym1__ <= G; ++sym1__) {
        current_statement__ = 24;
        current_statement__ = 24;
        check_greater_or_equal(function__, "D_votes[sym1__]",
                               D_votes[(sym1__ - 1)], 0);}
      current_statement__ = 25;
      validate_non_negative_index("Total_votes", "G", G);
      current_statement__ = 26;
      context__.validate_dims("data initialization","Total_votes","int",
          context__.to_vec(G));
      Total_votes = std::vector<int>(G, std::numeric_limits<int>::min());
      
      current_statement__ = 26;
      assign(Total_votes, nil_index_list(), context__.vals_i("Total_votes"),
        "assigning variable Total_votes");
      current_statement__ = 26;
      for (int sym1__ = 1; sym1__ <= G; ++sym1__) {
        current_statement__ = 26;
        current_statement__ = 26;
        check_greater_or_equal(function__, "Total_votes[sym1__]",
                               Total_votes[(sym1__ - 1)], 0);}
      current_statement__ = 27;
      validate_non_negative_index("bSex", "J_sex", J_sex);
      current_statement__ = 28;
      validate_non_negative_index("bAge", "J_age", J_age);
      current_statement__ = 29;
      validate_non_negative_index("bEducation", "J_educ", J_educ);
      current_statement__ = 30;
      validate_non_negative_index("bRace", "J_race", J_race);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
    }
    num_params_r__ = 0U;
    
    try {
      num_params_r__ += 1;
      num_params_r__ += J_sex;
      num_params_r__ += J_age;
      num_params_r__ += J_educ;
      num_params_r__ += J_race;
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
    }
  }
  template <bool propto__, bool jacobian__, typename T__>
  inline T__ log_prob(std::vector<T__>& params_r__,
                      std::vector<int>& params_i__,
                      std::ostream* pstream__ = nullptr) const {
    using local_scalar_t__ = T__;
    T__ lp__(0.0);
    stan::math::accumulator<T__> lp_accum__;
    static const char* function__ = "prefMRP_model_namespace::log_prob";
(void) function__;  // suppress unused var warning

    stan::io::reader<local_scalar_t__> in__(params_r__, params_i__);
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    (void) DUMMY_VAR__;  // suppress unused var warning

    
    try {
      local_scalar_t__ alpha;
      alpha = DUMMY_VAR__;
      
      current_statement__ = 1;
      alpha = in__.scalar();
      Eigen::Matrix<local_scalar_t__, -1, 1> bSex;
      bSex = Eigen::Matrix<local_scalar_t__, -1, 1>(J_sex);
      stan::math::fill(bSex, DUMMY_VAR__);
      
      current_statement__ = 2;
      bSex = in__.vector(J_sex);
      Eigen::Matrix<local_scalar_t__, -1, 1> bAge;
      bAge = Eigen::Matrix<local_scalar_t__, -1, 1>(J_age);
      stan::math::fill(bAge, DUMMY_VAR__);
      
      current_statement__ = 3;
      bAge = in__.vector(J_age);
      Eigen::Matrix<local_scalar_t__, -1, 1> bEducation;
      bEducation = Eigen::Matrix<local_scalar_t__, -1, 1>(J_educ);
      stan::math::fill(bEducation, DUMMY_VAR__);
      
      current_statement__ = 4;
      bEducation = in__.vector(J_educ);
      Eigen::Matrix<local_scalar_t__, -1, 1> bRace;
      bRace = Eigen::Matrix<local_scalar_t__, -1, 1>(J_race);
      stan::math::fill(bRace, DUMMY_VAR__);
      
      current_statement__ = 5;
      bRace = in__.vector(J_race);
      {
        current_statement__ = 6;
        lp_accum__.add(
          binomial_logit_lpmf<propto__>(D_votes, Total_votes,
            add(
              add(
                add(
                  add(alpha,
                    rvalue(bSex,
                      cons_list(index_multi(sex), nil_index_list()), "bSex")),
                  rvalue(bAge, cons_list(index_multi(age), nil_index_list()),
                    "bAge")),
                rvalue(bEducation,
                  cons_list(index_multi(education), nil_index_list()),
                  "bEducation")),
              rvalue(bRace, cons_list(index_multi(race), nil_index_list()),
                "bRace"))));
      }
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
    }
    lp_accum__.add(lp__);
    return lp_accum__.sum();
    } // log_prob() 
    
  template <typename RNG>
  inline void write_array(RNG& base_rng__, std::vector<double>& params_r__,
                          std::vector<int>& params_i__,
                          std::vector<double>& vars__,
                          bool emit_transformed_parameters__ = true,
                          bool emit_generated_quantities__ = true,
                          std::ostream* pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    vars__.resize(0);
    stan::io::reader<local_scalar_t__> in__(params_r__, params_i__);
    static const char* function__ = "prefMRP_model_namespace::write_array";
(void) function__;  // suppress unused var warning

    (void) function__;  // suppress unused var warning

    double lp__ = 0.0;
    (void) lp__;  // dummy to suppress unused var warning
    stan::math::accumulator<double> lp_accum__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    (void) DUMMY_VAR__;  // suppress unused var warning

    
    try {
      double alpha;
      alpha = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 1;
      alpha = in__.scalar();
      Eigen::Matrix<double, -1, 1> bSex;
      bSex = Eigen::Matrix<double, -1, 1>(J_sex);
      stan::math::fill(bSex, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 2;
      bSex = in__.vector(J_sex);
      Eigen::Matrix<double, -1, 1> bAge;
      bAge = Eigen::Matrix<double, -1, 1>(J_age);
      stan::math::fill(bAge, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 3;
      bAge = in__.vector(J_age);
      Eigen::Matrix<double, -1, 1> bEducation;
      bEducation = Eigen::Matrix<double, -1, 1>(J_educ);
      stan::math::fill(bEducation, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 4;
      bEducation = in__.vector(J_educ);
      Eigen::Matrix<double, -1, 1> bRace;
      bRace = Eigen::Matrix<double, -1, 1>(J_race);
      stan::math::fill(bRace, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 5;
      bRace = in__.vector(J_race);
      vars__.emplace_back(alpha);
      for (int sym1__ = 1; sym1__ <= J_sex; ++sym1__) {
        vars__.emplace_back(bSex[(sym1__ - 1)]);}
      for (int sym1__ = 1; sym1__ <= J_age; ++sym1__) {
        vars__.emplace_back(bAge[(sym1__ - 1)]);}
      for (int sym1__ = 1; sym1__ <= J_educ; ++sym1__) {
        vars__.emplace_back(bEducation[(sym1__ - 1)]);}
      for (int sym1__ = 1; sym1__ <= J_race; ++sym1__) {
        vars__.emplace_back(bRace[(sym1__ - 1)]);}
      if (logical_negation((primitive_value(emit_transformed_parameters__) ||
            primitive_value(emit_generated_quantities__)))) {
        return ;
      } 
      if (logical_negation(emit_generated_quantities__)) {
        return ;
      } 
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
    }
    } // write_array() 
    
  inline void transform_inits(const stan::io::var_context& context__,
                              std::vector<int>& params_i__,
                              std::vector<double>& vars__,
                              std::ostream* pstream__) const
    final {
    using local_scalar_t__ = double;
    vars__.clear();
    vars__.reserve(num_params_r__);
    
    try {
      int pos__;
      pos__ = std::numeric_limits<int>::min();
      
      pos__ = 1;
      double alpha;
      alpha = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 1;
      alpha = context__.vals_r("alpha")[(1 - 1)];
      Eigen::Matrix<double, -1, 1> bSex;
      bSex = Eigen::Matrix<double, -1, 1>(J_sex);
      stan::math::fill(bSex, std::numeric_limits<double>::quiet_NaN());
      
      {
        std::vector<local_scalar_t__> bSex_flat__;
        current_statement__ = 2;
        assign(bSex_flat__, nil_index_list(), context__.vals_r("bSex"),
          "assigning variable bSex_flat__");
        current_statement__ = 2;
        pos__ = 1;
        current_statement__ = 2;
        for (int sym1__ = 1; sym1__ <= J_sex; ++sym1__) {
          current_statement__ = 2;
          assign(bSex, cons_list(index_uni(sym1__), nil_index_list()),
            bSex_flat__[(pos__ - 1)], "assigning variable bSex");
          current_statement__ = 2;
          pos__ = (pos__ + 1);}
      }
      Eigen::Matrix<double, -1, 1> bAge;
      bAge = Eigen::Matrix<double, -1, 1>(J_age);
      stan::math::fill(bAge, std::numeric_limits<double>::quiet_NaN());
      
      {
        std::vector<local_scalar_t__> bAge_flat__;
        current_statement__ = 3;
        assign(bAge_flat__, nil_index_list(), context__.vals_r("bAge"),
          "assigning variable bAge_flat__");
        current_statement__ = 3;
        pos__ = 1;
        current_statement__ = 3;
        for (int sym1__ = 1; sym1__ <= J_age; ++sym1__) {
          current_statement__ = 3;
          assign(bAge, cons_list(index_uni(sym1__), nil_index_list()),
            bAge_flat__[(pos__ - 1)], "assigning variable bAge");
          current_statement__ = 3;
          pos__ = (pos__ + 1);}
      }
      Eigen::Matrix<double, -1, 1> bEducation;
      bEducation = Eigen::Matrix<double, -1, 1>(J_educ);
      stan::math::fill(bEducation, std::numeric_limits<double>::quiet_NaN());
      
      {
        std::vector<local_scalar_t__> bEducation_flat__;
        current_statement__ = 4;
        assign(bEducation_flat__, nil_index_list(),
          context__.vals_r("bEducation"),
          "assigning variable bEducation_flat__");
        current_statement__ = 4;
        pos__ = 1;
        current_statement__ = 4;
        for (int sym1__ = 1; sym1__ <= J_educ; ++sym1__) {
          current_statement__ = 4;
          assign(bEducation, cons_list(index_uni(sym1__), nil_index_list()),
            bEducation_flat__[(pos__ - 1)], "assigning variable bEducation");
          current_statement__ = 4;
          pos__ = (pos__ + 1);}
      }
      Eigen::Matrix<double, -1, 1> bRace;
      bRace = Eigen::Matrix<double, -1, 1>(J_race);
      stan::math::fill(bRace, std::numeric_limits<double>::quiet_NaN());
      
      {
        std::vector<local_scalar_t__> bRace_flat__;
        current_statement__ = 5;
        assign(bRace_flat__, nil_index_list(), context__.vals_r("bRace"),
          "assigning variable bRace_flat__");
        current_statement__ = 5;
        pos__ = 1;
        current_statement__ = 5;
        for (int sym1__ = 1; sym1__ <= J_race; ++sym1__) {
          current_statement__ = 5;
          assign(bRace, cons_list(index_uni(sym1__), nil_index_list()),
            bRace_flat__[(pos__ - 1)], "assigning variable bRace");
          current_statement__ = 5;
          pos__ = (pos__ + 1);}
      }
      vars__.emplace_back(alpha);
      for (int sym1__ = 1; sym1__ <= J_sex; ++sym1__) {
        vars__.emplace_back(bSex[(sym1__ - 1)]);}
      for (int sym1__ = 1; sym1__ <= J_age; ++sym1__) {
        vars__.emplace_back(bAge[(sym1__ - 1)]);}
      for (int sym1__ = 1; sym1__ <= J_educ; ++sym1__) {
        vars__.emplace_back(bEducation[(sym1__ - 1)]);}
      for (int sym1__ = 1; sym1__ <= J_race; ++sym1__) {
        vars__.emplace_back(bRace[(sym1__ - 1)]);}
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
    }
    } // transform_inits() 
    
  inline void get_param_names(std::vector<std::string>& names__) const {
    
    names__.clear();
    names__.emplace_back("alpha");
    names__.emplace_back("bSex");
    names__.emplace_back("bAge");
    names__.emplace_back("bEducation");
    names__.emplace_back("bRace");
    } // get_param_names() 
    
  inline void get_dims(std::vector<std::vector<size_t>>& dimss__) const
    final {
    dimss__.clear();
    dimss__.emplace_back(std::vector<size_t>{});
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(J_sex)});
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(J_age)});
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(J_educ)});
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(J_race)});
    
    } // get_dims() 
    
  inline void constrained_param_names(
                                      std::vector<std::string>& param_names__,
                                      bool emit_transformed_parameters__ = true,
                                      bool emit_generated_quantities__ = true) const
    final {
    
    param_names__.emplace_back(std::string() + "alpha");
    for (int sym1__ = 1; sym1__ <= J_sex; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "bSex" + '.' + std::to_string(sym1__));
      }}
    for (int sym1__ = 1; sym1__ <= J_age; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "bAge" + '.' + std::to_string(sym1__));
      }}
    for (int sym1__ = 1; sym1__ <= J_educ; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "bEducation" + '.' + std::to_string(sym1__));
      }}
    for (int sym1__ = 1; sym1__ <= J_race; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "bRace" + '.' + std::to_string(sym1__));
      }}
    if (emit_transformed_parameters__) {
      
    }
    
    if (emit_generated_quantities__) {
      
    }
    
    } // constrained_param_names() 
    
  inline void unconstrained_param_names(
                                        std::vector<std::string>& param_names__,
                                        bool emit_transformed_parameters__ = true,
                                        bool emit_generated_quantities__ = true) const
    final {
    
    param_names__.emplace_back(std::string() + "alpha");
    for (int sym1__ = 1; sym1__ <= J_sex; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "bSex" + '.' + std::to_string(sym1__));
      }}
    for (int sym1__ = 1; sym1__ <= J_age; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "bAge" + '.' + std::to_string(sym1__));
      }}
    for (int sym1__ = 1; sym1__ <= J_educ; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "bEducation" + '.' + std::to_string(sym1__));
      }}
    for (int sym1__ = 1; sym1__ <= J_race; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "bRace" + '.' + std::to_string(sym1__));
      }}
    if (emit_transformed_parameters__) {
      
    }
    
    if (emit_generated_quantities__) {
      
    }
    
    } // unconstrained_param_names() 
    
  inline std::string get_constrained_sizedtypes() const {
    stringstream s__;
    s__ << "[{\"name\":\"alpha\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"bSex\",\"type\":{\"name\":\"vector\",\"length\":" << J_sex << "},\"block\":\"parameters\"},{\"name\":\"bAge\",\"type\":{\"name\":\"vector\",\"length\":" << J_age << "},\"block\":\"parameters\"},{\"name\":\"bEducation\",\"type\":{\"name\":\"vector\",\"length\":" << J_educ << "},\"block\":\"parameters\"},{\"name\":\"bRace\",\"type\":{\"name\":\"vector\",\"length\":" << J_race << "},\"block\":\"parameters\"}]";
    return s__.str();
    } // get_constrained_sizedtypes() 
    
  inline std::string get_unconstrained_sizedtypes() const {
    stringstream s__;
    s__ << "[{\"name\":\"alpha\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"bSex\",\"type\":{\"name\":\"vector\",\"length\":" << J_sex << "},\"block\":\"parameters\"},{\"name\":\"bAge\",\"type\":{\"name\":\"vector\",\"length\":" << J_age << "},\"block\":\"parameters\"},{\"name\":\"bEducation\",\"type\":{\"name\":\"vector\",\"length\":" << J_educ << "},\"block\":\"parameters\"},{\"name\":\"bRace\",\"type\":{\"name\":\"vector\",\"length\":" << J_race << "},\"block\":\"parameters\"}]";
    return s__.str();
    } // get_unconstrained_sizedtypes() 
    
  
    // Begin method overload boilerplate
    template <typename RNG>
    inline void write_array(RNG& base_rng__,
                     Eigen::Matrix<double,Eigen::Dynamic,1>& params_r,
                     Eigen::Matrix<double,Eigen::Dynamic,1>& vars,
                     bool emit_transformed_parameters__ = true,
                     bool emit_generated_quantities__ = true,
                     std::ostream* pstream = nullptr) const {
      std::vector<double> params_r_vec(params_r.size());
      for (int i = 0; i < params_r.size(); ++i)
        params_r_vec[i] = params_r(i);
      std::vector<double> vars_vec;
      std::vector<int> params_i_vec;
      write_array(base_rng__, params_r_vec, params_i_vec, vars_vec,
          emit_transformed_parameters__, emit_generated_quantities__, pstream);
      vars.resize(vars_vec.size());
      for (int i = 0; i < vars.size(); ++i)
        vars(i) = vars_vec[i];
    }

    template <bool propto__, bool jacobian__, typename T_>
    inline T_ log_prob(Eigen::Matrix<T_,Eigen::Dynamic,1>& params_r,
               std::ostream* pstream = nullptr) const {
      std::vector<T_> vec_params_r;
      vec_params_r.reserve(params_r.size());
      for (int i = 0; i < params_r.size(); ++i)
        vec_params_r.push_back(params_r(i));
      std::vector<int> vec_params_i;
      return log_prob<propto__,jacobian__,T_>(vec_params_r, vec_params_i, pstream);
    }

    inline void transform_inits(const stan::io::var_context& context,
                         Eigen::Matrix<double, Eigen::Dynamic, 1>& params_r,
                         std::ostream* pstream__ = nullptr) const {
      std::vector<double> params_r_vec;
      std::vector<int> params_i_vec;
      transform_inits(context, params_i_vec, params_r_vec, pstream__);
      params_r.resize(params_r_vec.size());
      for (int i = 0; i < params_r.size(); ++i)
        params_r(i) = params_r_vec[i];
    }

};
}
using stan_model = prefMRP_model_namespace::prefMRP_model;

#ifndef USING_R

// Boilerplate
stan::model::model_base& new_model(
        stan::io::var_context& data_context,
        unsigned int seed,
        std::ostream* msg_stream) {
  stan_model* m = new stan_model(data_context, seed, msg_stream);
  return *m;
}

#endif


